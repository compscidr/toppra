
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_kinematics_duration.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_kinematics_duration.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_kinematics_duration.py:


Retime a path to a specific duration
========================================

.. GENERATED FROM PYTHON SOURCE LINES 6-9

`toppra` allows user to parametrize a path to a specific duration
while still satisfy constraints. We will see how to do this in this
example. First, import necessary libraries.

.. GENERATED FROM PYTHON SOURCE LINES 9-18

.. code-block:: default
   :lineno-start: 9

    import toppra as ta
    import toppra.constraint as constraint
    import toppra.algorithm as algo
    import numpy as np
    import matplotlib.pyplot as plt
    import time

    ta.setup_logging("INFO")








.. GENERATED FROM PYTHON SOURCE LINES 19-20

Parameters

.. GENERATED FROM PYTHON SOURCE LINES 20-24

.. code-block:: default
   :lineno-start: 20

    N_samples = 5
    SEED = 9
    dof = 7








.. GENERATED FROM PYTHON SOURCE LINES 25-27

Random waypoints used to obtain a random geometric path. Here,
we use spline interpolation.

.. GENERATED FROM PYTHON SOURCE LINES 27-31

.. code-block:: default
   :lineno-start: 27

    np.random.seed(SEED)
    way_pts = np.random.randn(N_samples, dof)
    path = ta.SplineInterpolator(np.linspace(0, 1, 5), way_pts)








.. GENERATED FROM PYTHON SOURCE LINES 32-33

Create velocity bounds, then velocity constraint object

.. GENERATED FROM PYTHON SOURCE LINES 33-36

.. code-block:: default
   :lineno-start: 33

    vlim_ = np.random.rand(dof) * 20
    vlim = np.vstack((-vlim_, vlim_)).T








.. GENERATED FROM PYTHON SOURCE LINES 37-38

Create acceleration bounds, then acceleration constraint object

.. GENERATED FROM PYTHON SOURCE LINES 38-44

.. code-block:: default
   :lineno-start: 38

    alim_ = np.random.rand(dof) * 2
    alim = np.vstack((-alim_, alim_)).T
    pc_vel = constraint.JointVelocityConstraint(vlim)
    pc_acc = constraint.JointAccelerationConstraint(
        alim, discretization_scheme=constraint.DiscretizationType.Interpolation)








.. GENERATED FROM PYTHON SOURCE LINES 45-46

Setup a parametrization instance

.. GENERATED FROM PYTHON SOURCE LINES 46-49

.. code-block:: default
   :lineno-start: 46

    instance = algo.TOPPRAsd([pc_vel, pc_acc], path)
    instance.set_desired_duration(60)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

     INFO [algorithm.py : 104] No gridpoint specified. Automatically choose a gridpoint with 290 points
     INFO [reachability_algorithm.py : 65] Solver wrapper not supplied. Choose solver wrapper automatically!
     INFO [reachability_algorithm.py : 75] Select solver seidel




.. GENERATED FROM PYTHON SOURCE LINES 50-51

Retime the trajectory, only this step is necessary.

.. GENERATED FROM PYTHON SOURCE LINES 51-55

.. code-block:: default
   :lineno-start: 51

    jnt_traj = instance.compute_trajectory(0, 0)
    ts_sample = np.linspace(0, jnt_traj.get_duration(), 100)
    qs_sample = jnt_traj(ts_sample, 2)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

     INFO [desired_duration_algorithm.py : 158] Desired duration 60.000000 sec is achievable. Continue computing.
     INFO [algorithm.py : 191] Successfully parametrize path. Duration: 60.000, previously 1.000)
     INFO [algorithm.py : 193] Finish parametrization in 0.033 secs
    /home/circleci/repo/toppra/utils.py:23: DeprecationWarning: Call to deprecated function get_duration in module toppra.interpolator.
      warnings.warn(




.. GENERATED FROM PYTHON SOURCE LINES 56-57

Output

.. GENERATED FROM PYTHON SOURCE LINES 57-62

.. code-block:: default
   :lineno-start: 57

    plt.plot(ts_sample, qs_sample)
    plt.xlabel("Time (s)")
    plt.ylabel("Joint acceleration (rad/s^2)")
    plt.show()




.. image:: /auto_examples/images/sphx_glr_plot_kinematics_duration_001.png
    :alt: plot kinematics duration
    :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 63-65

Compute the feasible sets and the controllable sets for viewing.
Note that these steps are not necessary.

.. GENERATED FROM PYTHON SOURCE LINES 65-81

.. code-block:: default
   :lineno-start: 65

    X = instance.compute_feasible_sets()
    K = instance.compute_controllable_sets(0, 0)
    _, sd_vec, _ = instance.compute_parameterization(0, 0)
    X = np.sqrt(X)
    K = np.sqrt(K)
    plt.plot(X[:, 0], c='green', label="Feasible sets")
    plt.plot(X[:, 1], c='green')
    plt.plot(K[:, 0], '--', c='red', label="Controllable sets")
    plt.plot(K[:, 1], '--', c='red')
    plt.plot(sd_vec, label="Velocity profile")
    plt.title("Path-position path-velocity plot")
    plt.xlabel("Path position")
    plt.ylabel("Path velocity square")
    plt.legend()
    plt.tight_layout()
    plt.show()



.. image:: /auto_examples/images/sphx_glr_plot_kinematics_duration_002.png
    :alt: Path-position path-velocity plot
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

     INFO [desired_duration_algorithm.py : 158] Desired duration 60.000000 sec is achievable. Continue computing.





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.344 seconds)


.. _sphx_glr_download_auto_examples_plot_kinematics_duration.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_kinematics_duration.py <plot_kinematics_duration.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_kinematics_duration.ipynb <plot_kinematics_duration.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
